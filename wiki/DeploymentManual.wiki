#summary Detailed deployment and configuration instructions
#labels Phase-Support

=*MetaDB Beta Deployment Manual*=

*This page is a work in progress.. Have only included the absolutely essential information, and will add more error handling/troubleshooting as we release.*

==*Overview*==

*This document is intended for users with a working knowledge of Linux administration.*

MetaDB is a free and open source Java-based web application that can be used for the digital cataloging and management of scholarly image collections. MetaDB's development environment was: 

_Operating System_: Red Hat Enterprise Linux 5.2 (Tikanga) 64 bit

_HTTP Server: _Apache Tomcat 5.5.27 

_Database Server: _PostgreSQL 8.1.1

MetaDB also works with Tomcat version 6 as well as PostgreSQL 8.4, which are the latest versions as of July 31, 2009. We would greatly appreciate input from users who are able to port MetaDB to other relational databases (see the “Advanced Deployment” file).

We have tried to make these instructions as clear as possible, minus configuring all the prerequisite software. Please understand that MetaDB is a work in progress and that unexpected bugs are bound to happen—in that case, please do let us know! 

We do realize this is a tedious document—unfortunately currently we are only able to provide a build installation using configuration files. While initial set up may take some time and tweaking, once that is done maintenance should be relatively straightforward. We may in the future attempt to create an easier installation, but there are some non-standard settings that MetaDB requires, and we have not been able to come up with a better solution as of now. If you are able to figure out a way to configure/deploy MetaDB more easily, feel free to share it with us.

_If you have any other questions/concerns etc, we are reachable via email (our contact information is listed at the end of this document)._

==*Pre-Deployment*==

*Requirements*: 
  * Apache Tomcat 5.5.27 or higher
  * PostgreSQL 8.1.1 or higher. (See the “Advanced Deployment” file for changing DBMS)
  * Java 6 SDK. (We have built on Java SE)
  * Java Advanced Imaging and JAI Image I/O Tools
  * Latest version of ImageMagick, with support for JPEG and any other necessary formats. We used libjpeg during development for JPEG support.
  * Apache Ant 1.6.5 or higher (for building)

Please see the respective documentation to install the above. 

  * [http://tomcat.apache.org/tomcat-6.0-doc/index.html Tomcat]
  * [http://www.postgresql.org/docs/manuals/ PostgreSQL]
  * [http://java.sun.com/javaee/downloads/index.jsp Java ]
  * [http://java.sun.com/javase/technologies/desktop/media/jai/ JAI]
  * [http://www.imagemagick.org/script/install-source.php ImageMagick]
  * [http://ant.apache.org/srcdownload.cgi Apache Ant]

_In addition, the following libraries are included with MetaDB's build files (you don't need to manually download them):_

  * Apache Commons File Upload 1.2.1
  * Apache Commons I/O 1.4
  * Apache Commons Lang 2.4
  * JAI Codec jai_codec.jar
  * JAI Core jai_core.jar
  * JAI main library jai_linux_i586.jar
  * naming-factory-dbcp.jar
  * OpenCSV 1.8
  * Apache Incubator Sanselan 0.97 
  * Apache Incubator Sanselan Javadoc 0.97

Please see the licenses file for the appropriate license acknowledgments for the above.

We will be assuming that correct privileges have been set for the execution of Tomcat, Java, and that a valid database administrator account exists for your relational database. We will also assume that the necessary network configuration has been done so that your web application can run on your network. 

==*Deployment*==

MetaDB is built using Apache Ant. There are several configuration files that need to be edited according to your installation of MetaDB. For our example, we will have the build files in a directory called “/usr/yamaguchih/metadb”, the Tomcat installation is located in “/usr/share/tomcat”, the master file directory is “/mnt/imago1/master", and the derivative root directory is "/mnt/imago1/access".

Also, we will assume this is being done in a Linux environment.

*1. Configuring metadb/metadb.conf and running Config

MetaDB comes with a simple configuration tool which reads the configuration file "metadb.conf" and generates the files "Global.java" and "build.xml". 

In metadb.conf there are two types of settings: 

-Build settings, and 
-Global variables. 

Build settings are what you need to get right in order for MetaDB to build properly. In metadb.conf you will see the following lines: 

{{{
TOMCAT_PATH				=""
MASTERS_DIRECTORY			=""
DERIV_DIRECTORY                         =""
}}}

Replace TOMCAT_PATH with the path of your Tomcat installation, or CATALINA_HOME. 

As will be explained later, MetaDB relies on a folder structure to manage projects. There are two superdirectories called "master" and "access. Within these, each project gets a directory, which contains all of the pertinent files for either master images or derivative images.

Set MASTERS_DIRECTORY to the location of the parent directory for your master files and DERIV_DIRECTORY to the location of the parent directory for your derivative files.

The file metadb.conf also contains global variable settings, please see the actual metadb.conf file for details on what the settings affect. 

After you have edited metadb.conf, run "bash configure". This should run Config.java, and your build settings and global settings should be updated. Make sure that this directory is included in your CLASSPATH before attempting to run, otherwise ClassDefNotFoundException may occur. 

*2. Configuring metadb/webapp-src/etc/context.xml: *

Please refer to the Tomcat documentation for details on setting up context.xml. This file depends greatly on your system's particular configuration. 

*3. Checklist:*

Before proceeding, make sure that you have double checked the following:

  * You have installed the necessary components listed under “Pre-Deployment.”
  * The configuration files listed above have been properly edited to match your system’s environment.
  * Your Tomcat server and database(PostgreSQL) server are both up and running, and have the correct authentication settings.
  * Your master and derivative(access) root directories are valid, have been properly configured in the build script, MetaDB has read access to your master directory and read/write access to your derivative(access) root directory.
  * Your Java installation is correct, and there are no class path clashes, missing libraries etc. 

*4. Creating the MetaDB database tables*

Go to the _scripts_ directory located in the root build file directory (in our example /usr/yamaguchih/metadb/scripts. In here you will find a file called “metadb.sql”. This is the main database setup script for MetaDB and will recreate, from scratch, all of MetaDB’s tables. This means that any data that was in there will be wiped out, so don’t run this script at your leisure! 

Using psql or another database management tool, execute the queries in "metadb.sql". You should now be ready to do a final setup of the deploy script, and deploy MetaDB. 

*5. Setting up your projects*

MetaDB requires projects to be organized in a specific file structure. In general, each project gets one subdirectory within the master and derivative(access) directories, MASTERS_DIRECTORY, and DERIV_DIRECTORY, from metadb.conf. In our example, the master directory is "/mnt/imago1/master" and the derivative(access) directory is "/mnt/imago1/access". So if we want a project called “proj1”, there should be a directory "/mnt/imago1/master/proj1", and "/mnt/imago1/access/proj1". 

Ensure that the master directory grants read only permissions to MetaDB and the derivative(access) directory grants read-write permissions to MetaDB.

Place all of your master files into your project subdirectory, WITHIN THE MASTER DIRECTORY (NOT the derivative(access) directory), in the below format.

In order to ensure data integrity and error detection in a cataloging environment MetaDB requires that your master file names end with {#####}.{extension}, where ##### is a five-digit integer sequence from 00001 to 99999 and extension is the file extension. This means one project can (theoretically) have 99,999 records. Place your master files sequenced by these five digits to have MetaDB process them in that order. Note that if there is a gap in sequencing or improper sequencing, MetaDB will refuse to process. (Refer to the user manual for details)

<wiki:comment>
*4. Setting up the deploy script *

When you are confident that you have the settings right, go to the directory you have the build files in. In our case this is /usr/yamaguchih/metadb. Here there is a file, “reload.sh” which is a bash script. Here are its contents:

{{{
rm –f {PROJECTS_TOMCAT_PATH_SYMLINK};

ant reload;

sleep 10;

ln -s {PROJECTS_PATH} {PROJECTS_TOMCAT_PATH_SYMLINK}; 

chown -h {TOMCAT_USER}:{TOMCAT_GROUP} {PROJECTS_TOMCAT_PATH_SYMLINK};

}}}

Replace {PROJECTS_TOMCAT_PATH_SYMLINK} with 

CATALINA_HOME/webapps/docbase/images/projects 

where *CATALINA_HOME* is the path your Tomcat installation (in our case, /usr/share/tomcat) and *docbase* is the same value from build.xml (in our case, ‘metadb’ without the quotes). The path in our example would be 

/usr/share/tomcat/webapps/metadb/images/projects .

* Replace PROJECTS_PATH with the value of the variable of the same name from metadb.conf. In our example this would be

/mnt/metadb-projects. 

* Replace TOMCAT_USER with the user under which Tomcat is running.

* Replace TOMCAT_GROUP with the group in which the above TOMCAT_USER belongs.

This short script will remove the symbolic link to your physical projects directory, reload the web application, wait for 10 seconds, recreate the symbolic link to your physical projects directory, and change the ownership of that link to be your Tomcat user (to allow Tomcat to access the master files).
</wiki:comment>

*5. Deploying MetaDB*

Go to the directory where build.xml lies and run 

reload.sh lies (if you moved it make sure it uses the right paths!) and execute the script (usually the command “./reload.sh” will do it). If all goes well, Ant will compile MetaDB, deploy it to your Tomcat server, and you should be able to access MetaDB from your favorite browser.

=*Post-Deployment*=

_Troubleshooting/Known Issues_

*Generic “file not found” or “file inexistent” messages*
The most likely causes are faulty path configurations. Double check your configuration files and make sure they are using valid paths.

*Java source code fails to compile*
This could be one of several reasons: Your CLASSPATH may be set up incorrectly, you may be missing one of the required external libraries, or you may be building a corrupt version of MetaDB. If you are getting “cannot find symbol” errors you are most likely missing some libraries. Be sure you have properly set up all of the dependent libraries.

*Ant fails to deploy to the Tomcat directory (CATALINA_HOME)*
Make sure your metadb.conf and build.xml are correct to your Tomcat installation, and that you haven’t changed any unnecessary Tomcat settings which may interfere with the deployment process. We have been able to deploy from scratch on a BSD system as superuser via the above process, and those listed are the only modifications to the configuration files that were necessary.

_System Log_

We have begun working on a component called the System Log, which tracks user and project activity. However, due to time constraints we have not been able to fully implement this. While some system logging is done this is partial functionality. We expect to complete this feature in our next version.

_Debug Log_

MetaDB is a work in progress and as such is prone to have programming error or stability issues. We appreciate greatly any feedback that could help us make it run better. 

We log any run time errors to a table called "debug_log". Due to the nature of web applications this seemed like a good way to keep track of exceptions. We have not included the online viewing feature for this table in our release version. If you think you've found a bug, please take a look directly at this table and send us the entire text of the error. Thanks!

_Disclaimer_

*Developer Contact Info*
Please feel free to email us with any comments, questions, bug reports, suggestions, fixes, etc.

Eric Luhrs, [mailto:luhrse@lafayette.edu luhrse@lafayette.edu] 
Miguel Haruki Yamaguchi, [mailto:yamagucm@lafayette.edu yamagucm@lafayette.edu]
Long L. Ho, [mailto:hol@lafayette.edu hol@lafayette.edu]